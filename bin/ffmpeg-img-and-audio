#!/usr/bin/env bash

# NOTE: https://unix.stackexchange.com/questions/9496/looping-through-files-with-spaces-in-the-names
# SOURCE: https://stackoverflow.com/questions/965053/extract-filename-and-extension-in-bash

OIFS="$IFS"
IFS=$'\n'

# https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
# set -euox pipefail
set -e

# https://gist.github.com/jonsuh/3c89c004888dfc7352be
# ----------------------------------
# Colors
# ----------------------------------
export NOCOLOR='\033[0m'
export RED='\033[0;31m'
export GREEN='\033[0;32m'
export ORANGE='\033[0;33m'
export BLUE='\033[0;34m'
export PURPLE='\033[0;35m'
export CYAN='\033[0;36m'
export LIGHTGRAY='\033[0;37m'
export DARKGRAY='\033[1;30m'
export LIGHTRED='\033[1;31m'
export LIGHTGREEN='\033[1;32m'
export YELLOW='\033[1;33m'
export LIGHTBLUE='\033[1;34m'
export LIGHTPURPLE='\033[1;35m'
export LIGHTCYAN='\033[1;36m'
export WHITE='\033[1;37m'

export awk_bin="$(which gawk)"
export sed_bin="$(which gsed)"

export delete_orig=false

while getopts ":hf:s:e:a:" opt; do
  case ${opt} in
    h ) # process option h
      ;;
    f ) # process option f
      filename_val=$OPTARG
      ;;
    s ) # process option s
      start_val=$OPTARG
      ;;
    e ) # process option e
      end_val=$OPTARG
      ;;
    a ) # process option a
      audio_filename_val=$OPTARG
      ;;
    \? )
      echo "Invalid option: $OPTARG" 1>&2
      echo "Example: ffmpeg-img-and-audio -f 'IMG_0148.PNG' -a 'Wiz Khalifa - See You Again (feat. Charlie Puth).mp3' -s 0 -e 15"
      ;;
    : )
      echo "Invalid option: $OPTARG requires an argument" 1>&2
      echo "Example: ffmpeg-img-and-audio -f 'IMG_0148.PNG' -a 'Wiz Khalifa - See You Again (feat. Charlie Puth).mp3' -s 0 -e 15"
      ;;
  esac
done

# if end val isn't set, add 15 as default
if [[ "${end_val}x" == "x" ]]; then
  end_val=$((start_val + 15))
fi

export input_file="${filename_val}"
export full_path_img_input_file="$(pwd)/${input_file}"



filename=$(basename -- "$input_file")
extension="${filename##*.}"
filename="${filename%.*}"

export full_path_output_file="meme_${filename}.mp4"


echo -e " ${YELLOW}[ffmpeg-img-and-audio]${NOCOLOR} DEBUG full_path_img_input_file=${YELLOW}${full_path_img_input_file}${NOCOLOR}"
echo -e " ${YELLOW}[ffmpeg-img-and-audio]${NOCOLOR} DEBUG audio_filename_val=${YELLOW}${audio_filename_val}${NOCOLOR}"
echo -e " ${YELLOW}[ffmpeg-img-and-audio]${NOCOLOR} DEBUG start_val=${YELLOW}${start_val}${NOCOLOR}"
echo -e " ${YELLOW}[ffmpeg-img-and-audio]${NOCOLOR} DEBUG end_val=${YELLOW}${end_val}${NOCOLOR}"
echo -e " ${YELLOW}[ffmpeg-img-and-audio]${NOCOLOR} DEBUG full_path_output_file=${YELLOW}${full_path_output_file}${NOCOLOR}"


echo -e " ${YELLOW}[ffmpeg-img-and-audio]${NOCOLOR} ffmpeg -stream_loop 1 -i \"${full_path_img_input_file}\" -i \"${audio_filename_val}\" -codec:v libx264 -tune stillimage -codec:a aac -b:a 192k -pix_fmt yuv420p -shortest -ss ${start_val} -t ${end_val} \"$full_path_output_file\"\n\n"

# https://ffmpeg.org/ffmpeg.html#toc-Main-options
# -codec[:stream_specifier] codec (input/output,per-stream)
# Select an encoder (when used before an output file) or a decoder (when used before an input file) for one or more streams. codec is the name of a decoder/encoder or a special value copy (output only) to indicate that the stream is not to be re-encoded.

# -t duration (input/output)
# When used as an input option (before -i), limit the duration of data read from the input file.
# When used as an output option (before an output url), stop writing the output after its duration reaches duration.
# duration must be a time duration specification, see (ffmpeg-utils)the Time duration section in the ffmpeg-utils(1) manual.

# -ss position (input/output)
# When used as an input option (before -i), seeks in this input file to position. Note that in most formats it is not possible to seek exactly, so ffmpeg will seek to the closest seek point before position. When transcoding and -accurate_seek is enabled (the default), this extra segment between the seek point and position will be decoded and discarded. When doing stream copy or when -noaccurate_seek is used, it will be preserved.
# When used as an output option (before an output url), decodes but discards input until the timestamps reach position.
# position must be a time duration specification, see (ffmpeg-utils)the Time duration section in the ffmpeg-utils(1) manual.

# -vcodec codec (output)
# Set the video codec. This is an alias for -codec:v.

# https://trac.ffmpeg.org/wiki/Encode/H.264
# You can optionally use -tune to change settings based upon the specifics of your input. Current tunings include:

# film - use for high quality movie content; lowers deblocking
# animation - good for cartoons; uses higher deblocking and more reference frames
# grain - preserves the grain structure in old, grainy film material
# stillimage - good for slideshow-like content
# fastdecode - allows faster decoding by disabling certain filters
# zerolatency - good for fast encoding and low-latency streaming
# psnr - ignore this as it is only used for codec development
# ssim - ignore this as it is only used for codec development
# For example, if your input is animation then use the animation tuning, or if you want to preserve grain in a film then use the grain tuning. If you are unsure of what to use or your input does not match any of tunings then omit the -tune option. You can see a list of current tunings with -tune help, and what settings they apply with x264 --fullhelp.

# https://trac.ffmpeg.org/wiki/Encode/AAC

# Set the bit rate with the -b:a option.

# -pix_fmts Show available pixel formats.

# yuv420p is a chroma subsampling scheme, and the p stands for planar, not progressive. In ffmpeg yuv420p is called a pixel format. See a generic list of supported pixel formats with ffmpeg -pix_fmts . See which pixel formats are supported by a specific encoder, such as ffmpeg -h encoder=libx264 .

###############################################################
# https://stackoverflow.com/questions/20847674/ffmpeg-libx264-height-not-divisible-by-2
# 294
# The answer to the original question which does not want to scale the video is:
# -vf "pad=ceil(iw/2)*2:ceil(ih/2)*2"
# Command:
# ffmpeg -r 24 -i frame_%05d.jpg -vcodec libx264 -y -an video.mp4 -vf "pad=ceil(iw/2)*2:ceil(ih/2)*2"
# Basically, .h264 needs even dimensions so this filter will:
# Divide the original height and width by 2
# Round it up to the nearest pixel
# Multiply it by 2 again, thus making it an even number
# Add black padding pixels up to this number
# You can change the color of the padding by adding filter parameter :color=white. See the documentation of pad.
###############################################################

# ###############################################################
# add audio and convert to mp4
ffmpeg -y -stream_loop 15 -i "${full_path_img_input_file}" -i "${audio_filename_val}" -codec:v libx264 -tune stillimage -vf "pad=ceil(iw/2)*2:ceil(ih/2)*2:color=white" -codec:a aac -b:a 192k -pix_fmt yuv420p -ss ${start_val} -t ${end_val} "$full_path_output_file"
# ###############################################################

IFS="$OIFS"
