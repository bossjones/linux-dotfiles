#!/usr/bin/env bash

# **********************************************
# Start SOURCE: geerlingguy
# **********************************************
# Use colors.
export CLICOLOR=1
export LSCOLORS=ExFxCxDxBxegedabagacad

# Custom $PATH with extra locations.
export PATH=/usr/local/bin:/usr/local/sbin:$HOME/bin:$PATH

# Syntax-highlight code for copying and pasting.
# Requires highlight (`brew install highlight`).
function pretty() {
  pbpaste | highlight --syntax=$1 -O rtf | pbcopy
}

# Git upstream branch syncer.
# Usage: gsync master (checks out master, pull upstream, push origin).
function gsync() {
  if [[ ! "$1" ]] ; then
      echo "You must supply a branch."
      return 0
  fi

  BRANCHES=$(git branch --list $1)
  if [ ! "$BRANCHES" ] ; then
     echo "Branch $1 does not exist."
     return 0
  fi

  git checkout "$1" && \
  git pull upstream "$1" && \
  git push origin "$1"
}

# Super useful Docker container oneshots.
# Usage: dockrun, or dockrun [centos7|fedora24|debian8|ubuntu1404|etc.]
dockrun() {
  docker run -it geerlingguy/docker-"${1:-ubuntu1604}"-ansible /bin/bash
}

# Enter a running Docker container.
function denter() {
  if [[ ! "$1" ]] ; then
      echo "You must supply a container ID or name."
      return 0
  fi

  docker exec -it $1 bash
  return 0
}

# Use rbenv.
if [ -f /usr/local/bin/rbenv ]; then
  eval "$(rbenv init -)"
fi

# # Ask for confirmation when 'prod' is in a command string.
# prod_command_trap () {
#   if [[ $BASH_COMMAND == *prod* ]]
#   then
#     read -p "Are you sure you want to run this command on prod [Y/n]? " -n 1 -r
#     if [[ $REPLY =~ ^[Yy]$ ]]
#     then
#       echo -e "\nRunning command \"$BASH_COMMAND\" \n"
#     else
#       echo -e "\nCommand was not run.\n"
#       return 1
#     fi
#   fi
# }
# shopt -s extdebug
# trap prod_command_trap DEBUG

# **********************************************
# End SOURCE: geerlingguy
# **********************************************


# TODO: Put this in a if? If UTF-8 exists?
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

# source $HOME/.bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# Set my editor and git editor
export EDITOR="vim"
export GIT_EDITOR='vim'

# virtualenv
export WORKON_HOME=/home/pi/.virtualenvs/scarlett_os
export PROJECT_HOME=$HOME/dev
export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/bin/virtualenv
export VIRTUALENVWRAPPER_SCRIPT=/usr/local/bin/virtualenvwrapper.sh
source /usr/local/bin/virtualenvwrapper.sh
export PYTHONSTARTUP=~/.pythonrc
export PIP_DOWNLOAD_CACHE=$HOME/.pip/cache

# Case-insensitive globbing (used in pathname expansion)
shopt -s nocaseglob

# load the last 5000 lines into memory
HISTSIZE=50000000
# save 10000 lines to disk
HISTFILESIZE=$HISTSIZE
# Append to the Bash history file, rather than overwriting it
shopt -s histappend
# have bash immediately add commands to our history instead of waiting for the end of each session
export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"

# Autocorrect typos in path names when using `cd`
shopt -s cdspell

# Enable some Bash 4 features when possible:
# * `autocd`, e.g. `**/qux` will enter `./foo/bar/baz/qux`
# * Recursive globbing, e.g. `echo **/*.txt`
for option in autocd globstar; do
  shopt -s "$option" 2> /dev/null
done

################################################################
# NOTE: New stuff
# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# FZF
if [ -f $HOME/.fzf.bash ]; then
  source ~/.fzf.bash
fi

export BASH_IT_THEME='slick'

# Set this to false to turn off version control status checking within the prompt for all themes
export SCM_CHECK=true

# Tab complete sudo commands
complete -cf sudo

# Load Bash It
export BASH_IT="$HOME/.bash_it"

if [ -e $BASH_IT/bash_it.sh ]; then
  source $BASH_IT/bash_it.sh
fi

# # Fix vim colors inside tmux
# if [ -n $TMUX ]; then
#   alias vim="TERM=screen-256color vim"
# fi

# # Put bash in vim mode
# set -o vi

# # Set default editor to vim
# export EDITOR=vim

# dircolors
if [ -e ~/.dircolors ]; then
  eval `dircolors -b ~/.dircolors`
fi
