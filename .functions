# #!/usr/bin/env bash

# # ********************************************************************
# # START. SOURCE: https://github.com/blacktop/dotfiles/blob/master/.aliases
# # ********************************************************************
# # URL-encode strings
# alias urlencode='python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1]);"'

# # Trim new lines and copy to clipboard
# alias c="tr -d '\n' | pbcopy"

# # Canonical hex dump; some systems have this symlinked
# command -v hd > /dev/null || alias hd="hexdump -C"

# # IP addresses
# alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
# alias localip="ipconfig getifaddr en0"
# alias ips="ifconfig -a | grep -o 'inet6\? \(addr:\)\?\s\?\(\(\([0-9]\+\.\)\{3\}[0-9]\+\)\|[a-fA-F0-9:]\+\)' | awk '{ sub(/inet6? (addr:)? ?/, \"\"); print }'"

# # View HTTP traffic
# alias sniff="sudo ngrep -d 'en1' -t '^(GET|POST) ' 'tcp and port 80'"
# alias httpdump="sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E \"Host\: .*|GET \/.*\""
# # ********************************************************************
# # END. SOURCE: https://github.com/blacktop/dotfiles/blob/master/.aliases
# # ********************************************************************



# # Start an HTTP server from a directory, optionally specifying the port
# function server() {
# 	local port="${1:-8000}";
# 	sleep 1 && open "http://localhost:${port}/" &
# 	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
# 	# And serve everything as UTF-8 (although not technically correct, this doesn't break anything for binary files)
# 	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
# }

# # Run `dig` and display the most useful info
# function digga() {
# 	dig +nocmd "$1" any +multiline +noall +answer;
# }

# # UTF-8-encode a string of Unicode symbols
# function escape() {
# 	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
# 	# print a newline unless we're piping the output to another program
# 	if [ -t 1 ]; then
# 		echo ""; # newline
# 	fi;
# }

# # Decode \x{ABCD}-style Unicode escape sequences
# function unidecode() {
# 	perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
# 	# print a newline unless we're piping the output to another program
# 	if [ -t 1 ]; then
# 		echo ""; # newline
# 	fi;
# }

# # Get a character's Unicode code point
# function codepoint() {
# 	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))";
# 	# print a newline unless we're piping the output to another program
# 	if [ -t 1 ]; then
# 		echo ""; # newline
# 	fi;
# }

# # Show all the names (CNs and SANs) listed in the SSL certificate
# # for a given domain
# function getcertnames() {
# 	if [ -z "${1}" ]; then
# 		echo "ERROR: No domain specified.";
# 		return 1;
# 	fi;

# 	local domain="${1}";
# 	echo "Testing ${domain}â€¦";
# 	echo ""; # newline

# 	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
# 		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

# 	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
# 		local certText=$(echo "${tmp}" \
# 			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
# 			no_serial, no_sigdump, no_signame, no_validity, no_version");
# 		echo "Common Name:";
# 		echo ""; # newline
# 		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
# 		echo ""; # newline
# 		echo "Subject Alternative Name(s):";
# 		echo ""; # newline
# 		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
# 			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
# 		return 0;
# 	else
# 		echo "ERROR: Certificate not found.";
# 		return 1;
# 	fi;
# }
