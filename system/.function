# Switch long/short prompt

ps0() {
  unset PROMPT_COMMAND
  PS1='$ '
}

ps1() {
  source "$DOTFILES_DIR"/system/.prompt
}

# Get named var (usage: get "VAR_NAME")

get() {
  echo "${!1}"
}

# Add to path

prepend-path() {
  [ -d $1 ] && PATH="$1:$PATH"
}

# Show 256 TERM colors

colors() {
  local X=$(tput op)
  local Y=$(printf %$((COLUMNS-6))s)
  for i in {0..256}; do
  o=00$i;
  echo -e ${o:${#o}-3:3} $(tput setaf $i;tput setab $i)${Y// /=}$X;
  done
}

# Calculator

calc() {
  echo "$*" | bc -l;
}

# Weather

meteo() {
  local LOCALE=`echo ${LANG:-en} | cut -c1-2`
  if [ $# -eq 0 ]; then
    local LOCATION=`curl -s ipinfo.io/loc`
  else
    local LOCATION=$1
  fi
  curl -s "$LOCALE.wttr.in/$LOCATION"
}

# # Markdown

# md() {
#   pandoc $1 | lynx -stdin -dump
# }

# SOURCE: https://github.com/eliangcs/dotfiles/blob/master/.oh-my-zsh/custom/general.zsh
# World clock

c() {
    TZ=America/Los_Angeles date +"%Y-%m-%d %H:%M %z Los Angeles"
    TZ=America/Chicago date +"%Y-%m-%d %H:%M %z Chicago"
    TZ=America/New_York date +"%Y-%m-%d %H:%M %z New York"
    TZ=UTC date +"%Y-%m-%d %H:%M %z UTC"
    TZ=Europe/London date +"%Y-%m-%d %H:%M %z London"
    TZ=Europe/Berlin date +"%Y-%m-%d %H:%M %z Berlin"
    TZ=Europe/Moscow date +"%Y-%m-%d %H:%M %z Moscow"
    TZ=Asia/Taipei date +"%Y-%m-%d %H:%M %z Taipei"
    TZ=Asia/Tokyo date +"%Y-%m-%d %H:%M %z Tokyo"
    TZ=Australia/Sydney date +"%Y-%m-%d %H:%M %z Sydney"
}

# Colorize log

colorlog() {
    esc=$(printf '\033')
    sed -E "\
s#\[([^]]+)\]#${esc}[1;35m[\1]${esc}[0m#; \
s#WARNING#${esc}[33m&${esc}[0m#; \
s#ERROR#${esc}[31m&${esc}[0m#; \
s#INFO#${esc}[36m&${esc}[0m#; \
s#DEBUG#${esc}[32m&${esc}[0m#; \
s#[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}[^ \t]*#${esc}[1;34m&${esc}[0m#"
}

# https://forum.openframeworks.cc/t/speeding-up-compilation-with-ccache-xcode-tip/23492
ccache-clang-env() {
  if type -p `which ccache` >/dev/null 2>&1; then
    export CCACHE_MAXSIZE=10G
    export CCACHE_CPP2=true
    export CCACHE_HARDLINK=true
    export CCACHE_SLOPPINESS=file_macro,time_macros,include_file_mtime,include_file_ctime,file_stat_matches
    exec /usr/local/bin/ccache /usr/bin/clang "$@"
  else
    exec clang "$@"
  fi
}

ccache-clangpp-env() {
  if type -p `which ccache` >/dev/null 2>&1; then
    export CCACHE_MAXSIZE=10G
    export CCACHE_CPP2=true
    export CCACHE_HARDLINK=true
    export CCACHE_SLOPPINESS=file_macro,time_macros,include_file_mtime,include_file_ctime,file_stat_matches
    exec /usr/local/bin/ccache /usr/bin/clang++ "$@"
  else
    exec clang++ "$@"
  fi
}
